Imports System.Windows.Forms
Imports Inventor

Sub Main()
    ' Verificação do documento ativo
    If ThisApplication.ActiveDocument Is Nothing OrElse _
       ThisApplication.ActiveDocument.DocumentType <> DocumentTypeEnum.kDrawingDocumentObject Then
        MessageBox.Show("Este script deve ser executado em um documento de desenho (.idw).", _
                        "Documento inválido", MessageBoxButtons.OK, MessageBoxIcon.Warning)
        Return
    End If

    Dim drawingDoc As DrawingDocument = CType(ThisApplication.ActiveDocument, DrawingDocument)
    Dim assemblyDoc As AssemblyDocument = GetAssemblyFromFirstSheet(drawingDoc)
    Dim bomRows As BOMRowsEnumerator = If(assemblyDoc IsNot Nothing, GetBOMRows(drawingDoc), Nothing)

    ' Criar formulário principal
    Dim form As New Form() With {
        .Text = "Gestão de Páginas de Desenho",
        .Width = 1400,
        .Height = 800,
        .StartPosition = FormStartPosition.CenterScreen
    }

    Dim splitContainer As New SplitContainer() With {
        .Dock = DockStyle.Fill,
        .Orientation = Orientation.Vertical,
        .SplitterDistance = form.Width \ 2
    }
    form.Controls.Add(splitContainer)

    ' --- Painel esquerdo (TreeView + botões) ---
    Dim panelEsqLayout As New TableLayoutPanel() With {.Dock = DockStyle.Fill, .RowCount = 2}
    panelEsqLayout.RowStyles.Add(New RowStyle(SizeType.Percent, 100))
    panelEsqLayout.RowStyles.Add(New RowStyle(SizeType.Absolute, 110))
    splitContainer.Panel1.Controls.Add(panelEsqLayout)

    Dim treeView As New TreeView() With {.Dock = DockStyle.Fill, .CheckBoxes = True}
    panelEsqLayout.Controls.Add(treeView, 0, 0)

    Dim panelEsqBottom As New FlowLayoutPanel() With {
        .Dock = DockStyle.Fill, 
        .FlowDirection = FlowDirection.LeftToRight,
        .AutoScroll = True
    }
    Dim btnInsert As New Button() With {.Text = "Inserir Vistas", .Width = 200}
    Dim btnExpandir As New Button() With {.Text = "Expandir", .Width = 100}
    Dim btnContrair As New Button() With {.Text = "Contrair", .Width = 100}
    Dim btnSelecionarTudo As New Button() With {.Text = "Selecionar Tudo", .Width = 140}
    Dim btnDesmarcarTudo As New Button() With {.Text = "Desmarcar Tudo", .Width = 140}
    Dim btnAtualizarStatus As New Button() With {.Text = "Atualizar BOM", .Width = 140}
    panelEsqBottom.Controls.AddRange({btnInsert, btnExpandir, btnContrair, btnSelecionarTudo, btnDesmarcarTudo, btnAtualizarStatus})
    panelEsqLayout.Controls.Add(panelEsqBottom, 0, 1)

    ' Preencher TreeView com BOM
    If bomRows IsNot Nothing Then
        For Each row As BOMRow In bomRows
            AddBOMRowNode(Row, treeView.Nodes, drawingDoc)
        Next
        OrdenarTreeNodes(treeView.Nodes)
        treeView.ExpandAll()
    End If

    ' --- Painel direito (ListView de folhas + botões) ---
    Dim panelDirLayout As New TableLayoutPanel() With {.Dock = DockStyle.Fill, .RowCount = 2}
    panelDirLayout.RowStyles.Add(New RowStyle(SizeType.Percent, 100))
    panelDirLayout.RowStyles.Add(New RowStyle(SizeType.Absolute, 100))
    splitContainer.Panel2.Controls.Add(panelDirLayout)

    Dim sheetListView As New ListView() With {
        .Dock = DockStyle.Fill,
        .CheckBoxes = True,
        .View = System.Windows.Forms.View.Details,
        .FullRowSelect = True
    }
    sheetListView.Columns.Add("Folhas", -2, HorizontalAlignment.Left)
    panelDirLayout.Controls.Add(sheetListView, 0, 0)

    Dim panelDirBottom As New FlowLayoutPanel() With {
        .Dock = DockStyle.Fill,
        .FlowDirection = FlowDirection.RightToLeft,
        .AutoScroll = True
    }
    Dim btnSelectAll As New Button() With {.Text = "Selecionar Todas", .Width = 160}
    Dim btnDeselectAll As New Button() With {.Text = "Desmarcar Todas", .Width = 160}
    Dim btnSelectByPrefix As New Button() With {.Text = "Selecionar por Prefixo", .Width = 180}
    Dim btnAtualizarFolhas As New Button() With {.Text = "Atualizar Folhas", .Width = 160}
    Dim btnExcluirFolhas As New Button() With {.Text = "Excluir Selecionadas", .Width = 200}
    Dim btnCopiarFolhas As New Button() With {.Text = "Copiar Selecionadas", .Width = 200}
    panelDirBottom.Controls.AddRange({btnCopiarFolhas, btnExcluirFolhas, btnAtualizarFolhas, btnSelectByPrefix, btnDeselectAll, btnSelectAll})
    panelDirLayout.Controls.Add(panelDirBottom, 0, 1)

    ' Inicializa lista de folhas
    AtualizarListaDeFolhas(sheetListView, drawingDoc)

    ' --- Handlers dos botões ---
    AddHandler btnAtualizarFolhas.Click, Sub()
        AtualizarListaDeFolhas(sheetListView, drawingDoc)
    End Sub

    AddHandler btnCopiarFolhas.Click, Sub()
        CopiarFolhasSelecionadas(sheetListView, drawingDoc)
        AtualizarListaDeFolhas(sheetListView, drawingDoc)
    End Sub

    AddHandler btnExcluirFolhas.Click, Sub()
        ExcluirFolhasSelecionadas(sheetListView, drawingDoc)
        AtualizarListaDeFolhas(sheetListView, drawingDoc)
    End Sub

    AddHandler btnSelectAll.Click, Sub()
        For Each item As ListViewItem In sheetListView.Items
            item.Checked = True
        Next
    End Sub

    AddHandler btnDeselectAll.Click, Sub()
        For Each item As ListViewItem In sheetListView.Items
            item.Checked = False
        Next
    End Sub

    AddHandler btnSelectByPrefix.Click, Sub()
        Dim prefixo As String = InputBox("Digite o prefixo:", "Selecionar por Prefixo")
        If prefixo Is Nothing Then Return
        If prefixo.Length < 2 Then
            MessageBox.Show("Digite ao menos 2 caracteres.", "Prefixo inválido", MessageBoxButtons.OK, MessageBoxIcon.Warning)
            Return
        End If
        For Each item As ListViewItem In sheetListView.Items
            If item.Text.ToUpper().StartsWith(prefixo.ToUpper()) Then
                item.Checked = True
            End If
        Next
    End Sub

    AddHandler btnExpandir.Click, Sub()
        treeView.ExpandAll()
    End Sub

    AddHandler btnContrair.Click, Sub()
        treeView.CollapseAll()
    End Sub

    AddHandler btnSelecionarTudo.Click, Sub()
        SetCheckState(treeView.Nodes, True)
    End Sub

    AddHandler btnDesmarcarTudo.Click, Sub()
        SetCheckState(treeView.Nodes, False)
    End Sub

    AddHandler btnAtualizarStatus.Click, Sub()
        treeView.Nodes.Clear()
        If bomRows IsNot Nothing Then
            For Each row As BOMRow In bomRows
                AddBOMRowNode(Row, treeView.Nodes, drawingDoc)
            Next
            OrdenarTreeNodes(treeView.Nodes)
            treeView.ExpandAll()
        End If
    End Sub

    ' Mostrar o formulário
    form.ShowDialog()
End Sub

' === Métodos auxiliares ===

Sub AtualizarListaDeFolhas(sheetListView As ListView, drawingDoc As DrawingDocument)
    sheetListView.Items.Clear()
    For Each sh As Sheet In drawingDoc.Sheets
        Dim item As New ListViewItem(sh.Name)
        item.Checked = Not sh.ExcludeFromPrinting
        sheetListView.Items.Add(item)
    Next
End Sub

Sub CopiarFolhasSelecionadas(sheetListView As ListView, drawingDoc As DrawingDocument)
    Dim selectedSheets = sheetListView.CheckedItems.Cast(Of ListViewItem)().Select(Function(i) i.Text).ToList()
    If selectedSheets.Count = 0 Then
        MessageBox.Show("Selecione ao menos uma folha para copiar.", "Aviso", MessageBoxButtons.OK, MessageBoxIcon.Warning)
        Return
    End If

    Dim tempDrawingDoc As DrawingDocument = Nothing

    For Each sheetName As String In selectedSheets
        Try
            Dim sheetToCopy As Sheet = drawingDoc.Sheets.Item(sheetName)
            If tempDrawingDoc Is Nothing Then
                tempDrawingDoc = CType(ThisApplication.Documents.Add(DocumentTypeEnum.kDrawingDocumentObject, , False), DrawingDocument)
            End If
            Dim tempSheet As Sheet = sheetToCopy.CopyTo(tempDrawingDoc)
            tempSheet.CopyTo(drawingDoc)
        Catch ex As Exception
            MessageBox.Show("Erro ao copiar folha '" & sheetName & "': " & ex.Message, "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error)
        End Try
    Next

    If tempDrawingDoc IsNot Nothing Then
        tempDrawingDoc.Close(True)
    End If

    MessageBox.Show("Folhas copiadas com sucesso.", "Sucesso", MessageBoxButtons.OK, MessageBoxIcon.Information)
End Sub

Sub ExcluirFolhasSelecionadas(sheetListView As ListView, drawingDoc As DrawingDocument)
    Dim selectedSheets = sheetListView.CheckedItems.Cast(Of ListViewItem)().Select(Function(i) i.Text).ToList()
    If selectedSheets.Count = 0 Then
        MessageBox.Show("Selecione ao menos uma folha para excluir.", "Atenção", MessageBoxButtons.OK, MessageBoxIcon.Warning)
        Return
    End If

    Dim confirmResult = MessageBox.Show("Tem certeza que deseja excluir as folhas selecionadas?" & vbCrLf & _
                                        "Essa ação não pode ser desfeita.", _
                                        "Confirmar Exclusão", MessageBoxButtons.YesNo, MessageBoxIcon.Warning)
    If confirmResult <> DialogResult.Yes Then
        Return
    End If

    For i As Integer = drawingDoc.Sheets.Count To 1 Step -1
        Dim sh As Sheet = drawingDoc.Sheets.Item(i)
        If selectedSheets.Contains(sh.Name) Then
            Try
                sh.Delete()
            Catch ex As Exception
                MessageBox.Show("Erro ao excluir folha '" & sh.Name & "': " & ex.Message, "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error)
            End Try
        End If
    Next

    MessageBox.Show("Folhas excluídas com sucesso.", "Sucesso", MessageBoxButtons.OK, MessageBoxIcon.Information)
End Sub

Function GetAssemblyFromFirstSheet(drawingDoc As DrawingDocument) As AssemblyDocument
    Try
        Dim firstSheet As Sheet = drawingDoc.Sheets.Item(1)
        If firstSheet.DrawingViews.Count = 0 Then Return Nothing
        Dim baseDrawingView As DrawingView = firstSheet.DrawingViews.Item(1)
        Dim refDocDescriptor = baseDrawingView.ReferencedDocumentDescriptor
        If refDocDescriptor Is Nothing Then Return Nothing
        Dim refDoc = refDocDescriptor.ReferencedDocument
        If refDoc IsNot Nothing AndAlso refDoc.DocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            Return CType(refDoc, AssemblyDocument)
        End If
    Catch ex As Exception
        MessageBox.Show("Erro ao obter montagem da primeira folha: " & ex.Message, "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error)
    End Try

    Return Nothing
End Function

Function GetBOMRows(drawingDoc As DrawingDocument) As BOMRowsEnumerator
    Try
        If drawingDoc.Sheets.Count = 0 OrElse drawingDoc.Sheets.Item(1).DrawingViews.Count = 0 Then
            Return Nothing
        End If

        Dim refDoc As Document = drawingDoc.Sheets.Item(1).DrawingViews.Item(1).ReferencedDocumentDescriptor.ReferencedDocument
        If Not TypeOf refDoc Is AssemblyDocument Then Return Nothing

        Dim asm As AssemblyDocument = CType(refDoc, AssemblyDocument)
        Dim bom As BOM = asm.ComponentDefinition.BOM
        bom.StructuredViewEnabled = True
        bom.StructuredViewFirstLevelOnly = False

        For Each bomView As BOMView In bom.BOMViews
            If BOMView.ViewType = BOMViewTypeEnum.kStructuredBOMViewType Then
                Return BOMView.BOMRows
            End If
        Next
    Catch ex As Exception
        MessageBox.Show("Erro ao obter BOM Rows: " & ex.Message, "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error)
    End Try

    Return Nothing
End Function

Sub AddBOMRowNode(row As BOMRow, parent As TreeNodeCollection, drawingDoc As DrawingDocument)
    Try
        ' Ignorar elementos do Content Center e estruturas não normais
        If row.ComponentDefinitions IsNot Nothing AndAlso row.ComponentDefinitions.Count > 0 Then
            Dim defComp = row.ComponentDefinitions.Item(1)
            If TypeOf defComp Is PartComponentDefinition Then
                If CType(defComp, PartComponentDefinition).IsContentMember Then Return
            End If
            If defComp.BOMStructure <> BOMStructureEnum.kNormalBOMStructure Then Return
        End If

        ' Propriedades da peça
        Dim docPath As String = ""
        Dim partName As String = ""
        Dim itemName As String = ""

        Try
            If row.ComponentDefinitions IsNot Nothing AndAlso row.ComponentDefinitions.Count > 0 Then
                Dim doc = row.ComponentDefinitions.Item(1).Document
                docPath = doc.FullFileName
                Try
                    partName = doc.PropertySets.Item("Design Tracking Properties").Item("Part Number").Value
                Catch
                    partName = ""
                End Try
            End If
        Catch
        End Try

        Try
            itemName = row.Name
        Catch
            itemName = row.ItemNumber
        End Try

        Dim itemNumber As String = row.ItemNumber

        ' Verificar se já existe vista dessa peça no desenho
        Dim inDrawing As Boolean = False
        Dim pages As New List(Of String)

        For Each sh As Sheet In drawingDoc.Sheets
            For Each vw As DrawingView In sh.DrawingViews
                Try
                    Dim rd = vw.ReferencedDocumentDescriptor.ReferencedDocument
                    If rd IsNot Nothing AndAlso String.Equals(rd.FullFileName, docPath, StringComparison.OrdinalIgnoreCase) Then
                        inDrawing = True
                        Dim pageNum As String
                        If sh.Name.Contains(":") Then
                            pageNum = sh.Name.Substring(sh.Name.LastIndexOf(":") + 1).PadLeft(2, "0"c)
                        Else
                            pageNum = "01"
                        End If
                        If Not pages.Contains(pageNum) Then
                            pages.Add(pageNum)
                        End If
                    End If
                Catch
                End Try
            Next
        Next
        pages.Sort()

        Dim status As String
        Dim pageText As String = ""
        If Not inDrawing Then
            status = "🚫"
        ElseIf pages.Count = 1 Then
            status = "✔️"
            pageText = "[Pág: " & pages(0) & "]"
        Else
            status = "🔵"
            pageText = "[Pág: " & String.Join(", ", pages) & "]"
        End If

        Dim labelNumber As String = If(partName <> "", partName, itemNumber)
        Dim nodeText As String = String.Format("({0}) {1} – {2} {3}", status, itemNumber, labelNumber, pageText)
        Dim tagData = Tuple.Create(docPath, itemNumber, labelNumber)

        Dim node As New TreeNode(nodeText) With {
            .Tag = tagData,
            .Name = itemNumber
        }
        parent.Add(node)

        If row.ChildRows IsNot Nothing AndAlso row.ChildRows.Count > 0 Then
            For Each childRow As BOMRow In row.ChildRows
                AddBOMRowNode(childRow, node.Nodes, drawingDoc)
            Next
        End If

    Catch
        ' ignorar erros de nó
    End Try
End Sub

Function GetCheckedNodes(nodes As TreeNodeCollection) As List(Of TreeNode)
    Dim result As New List(Of TreeNode)
    For Each n As TreeNode In nodes
        If n.Checked Then result.Add(n)
        If n.Nodes.Count > 0 Then
            result.AddRange(GetCheckedNodes(n.Nodes))
        End If
    Next
    Return result
End Function

Sub SetCheckState(nodes As TreeNodeCollection, state As Boolean)
    For Each n As TreeNode In nodes
        n.Checked = state
        If n.Nodes.Count > 0 Then
            SetCheckState(n.Nodes, state)
        End If
    Next
End Sub

Private Function CalcularEscalaIdeal(compDef As ComponentDefinition) As Double
    Try
        Dim oBox As Box = compDef.RangeBox
        Dim largura As Double = Math.Abs(oBox.MaxPoint.X - oBox.MinPoint.X)
        Dim altura As Double = Math.Abs(oBox.MaxPoint.Y - oBox.MinPoint.Y)
        Dim profundidade As Double = Math.Abs(oBox.MaxPoint.Z - oBox.MinPoint.Z)

        Dim tamanhoMaximo As Double = Math.Max(largura, Math.Max(altura, profundidade)) * 10
        Dim areaUtil As Double = 180
        Dim escala As Double = areaUtil / tamanhoMaximo

        If escala >= 1 Then Return 1
        If escala >= 0.5 Then Return 0.5
        If escala >= 0.2 Then Return 0.2
        If escala >= 0.1 Then Return 0.1
        Return 0.05
    Catch
        Return 1
    End Try
End Function

Sub OrdenarTreeNodes(nodes As TreeNodeCollection)
    Dim lista As New List(Of TreeNode)
    For Each n As TreeNode In nodes
        lista.Add(n)
    Next
    lista.Sort(Function(a As TreeNode, b As TreeNode) String.Compare(a.Text, b.Text))
    nodes.Clear()
    For Each n2 As TreeNode In lista
        nodes.Add(n2)
        If n2.Nodes.Count > 0 Then
            OrdenarTreeNodes(n2.Nodes)
        End If
    Next
End Sub
